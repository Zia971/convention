import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import json
import uuid
from dataclasses import dataclass, asdict
from typing import List, Dict, Optional
import sqlite3
import os

# Configuration de la page
st.set_page_config(
    page_title="OPCOPILOT v3.0 - SPIC Guadeloupe",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1f77b4, #ff7f0e, #2ca02c);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        font-size: 2rem;
        font-weight: bold;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #1f77b4;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    }
    
    .status-active { color: #28a745; font-weight: bold; }
    .status-pending { color: #ffc107; font-weight: bold; }
    .status-critical { color: #dc3545; font-weight: bold; }
    
    .timeline-container {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .phase-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        transition: all 0.3s ease;
    }
    
    .phase-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        transform: translateY(-2px);
    }
    
    .sidebar-logo {
        text-align: center;
        padding: 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        margin-bottom: 1rem;
        color: white;
    }
    
    .clickable-row {
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .clickable-row:hover {
        background-color: #f8f9fa;
    }
    
    .aco-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .frein-alert {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 5px;
    }
    
    .frein-critical {
        background: #f8d7da;
        border-left: 4px solid #dc3545;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# Classes de donn√©es
@dataclass
class Phase:
    id: str
    nom: str
    date_debut: datetime
    date_fin: datetime
    couleur: str
    statut: str = "En attente"  # En attente, En cours, Termin√©, Retard
    description: str = ""
    responsable: str = ""
    freins: List[str] = None
    
    def __post_init__(self):
        if self.freins is None:
            self.freins = []

@dataclass
class Operation:
    id: str
    nom: str
    type_operation: str  # OPP, VEFA, MANDATS_ETUDES, MANDATS_REALISATION, AMO
    aco_responsable: str
    date_creation: datetime
    date_debut: datetime
    date_fin_prevue: datetime
    budget: float
    statut: str = "Cr√©√©e"
    phases: List[Phase] = None
    
    def __post_init__(self):
        if self.phases is None:
            self.phases = []

@dataclass
class ACO:
    nom: str
    email: str
    telephone: str
    specialites: List[str]
    operations_en_cours: int = 0
    total_budget: float = 0.0

class DatabaseManager:
    def __init__(self, db_path="opcopilot.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Table operations
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS operations (
                id TEXT PRIMARY KEY,
                nom TEXT NOT NULL,
                type_operation TEXT NOT NULL,
                aco_responsable TEXT NOT NULL,
                date_creation TEXT NOT NULL,
                date_debut TEXT NOT NULL,
                date_fin_prevue TEXT NOT NULL,
                budget REAL NOT NULL,
                statut TEXT DEFAULT 'Cr√©√©e'
            )
        """)
        
        # Table phases
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS phases (
                id TEXT PRIMARY KEY,
                operation_id TEXT NOT NULL,
                nom TEXT NOT NULL,
                date_debut TEXT NOT NULL,
                date_fin TEXT NOT NULL,
                couleur TEXT NOT NULL,
                statut TEXT DEFAULT 'En attente',
                description TEXT,
                responsable TEXT,
                freins TEXT,
                FOREIGN KEY (operation_id) REFERENCES operations (id)
            )
        """)
        
        # Table ACO
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS aco (
                nom TEXT PRIMARY KEY,
                email TEXT,
                telephone TEXT,
                specialites TEXT
            )
        """)
        
        conn.commit()
        conn.close()
        
        # Initialiser ACO par d√©faut
        self.init_default_aco()
    
    def init_default_aco(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM aco")
        count = cursor.fetchone()[0]
        
        if count == 0:
            default_aco = [
                ("Jean MARTIN", "j.martin@spic-guadeloupe.fr", "0590 12 34 56", json.dumps(["OPP", "VEFA"])),
                ("Marie DUBOIS", "m.dubois@spic-guadeloupe.fr", "0590 12 34 57", json.dumps(["MANDATS_ETUDES", "AMO"])),
                ("Pierre BERNARD", "p.bernard@spic-guadeloupe.fr", "0590 12 34 58", json.dumps(["MANDATS_REALISATION", "OPP"])),
                ("Sophie LEROY", "s.leroy@spic-guadeloupe.fr", "0590 12 34 59", json.dumps(["VEFA", "AMO"])),
                ("Michel PETIT", "m.petit@spic-guadeloupe.fr", "0590 12 34 60", json.dumps(["OPP", "MANDATS_ETUDES"]))
            ]
            
            cursor.executemany("INSERT INTO aco VALUES (?, ?, ?, ?)", default_aco)
            conn.commit()
        
        conn.close()
    
    def save_operation(self, operation: Operation):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT OR REPLACE INTO operations 
            (id, nom, type_operation, aco_responsable, date_creation, date_debut, date_fin_prevue, budget, statut)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            operation.id, operation.nom, operation.type_operation, operation.aco_responsable,
            operation.date_creation.isoformat(), operation.date_debut.isoformat(),
            operation.date_fin_prevue.isoformat(), operation.budget, operation.statut
        ))
        
        # Supprimer anciennes phases
        cursor.execute("DELETE FROM phases WHERE operation_id = ?", (operation.id,))
        
        # Ins√©rer nouvelles phases
        for phase in operation.phases:
            cursor.execute("""
                INSERT INTO phases 
                (id, operation_id, nom, date_debut, date_fin, couleur, statut, description, responsable, freins)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                phase.id, operation.id, phase.nom, phase.date_debut.isoformat(),
                phase.date_fin.isoformat(), phase.couleur, phase.statut,
                phase.description, phase.responsable, json.dumps(phase.freins)
            ))
        
        conn.commit()
        conn.close()
    
    def load_operations(self) -> List[Operation]:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM operations")
        operations_data = cursor.fetchall()
        
        operations = []
        for op_data in operations_data:
            # Charger les phases
            cursor.execute("SELECT * FROM phases WHERE operation_id = ? ORDER BY date_debut", (op_data[0],))
            phases_data = cursor.fetchall()
            
            phases = []
            for phase_data in phases_data:
                phase = Phase(
                    id=phase_data[0],
                    nom=phase_data[2],
                    date_debut=datetime.fromisoformat(phase_data[3]),
                    date_fin=datetime.fromisoformat(phase_data[4]),
                    couleur=phase_data[5],
                    statut=phase_data[6],
                    description=phase_data[7] or "",
                    responsable=phase_data[8] or "",
                    freins=json.loads(phase_data[9] or "[]")
                )
                phases.append(phase)
            
            operation = Operation(
                id=op_data[0],
                nom=op_data[1],
                type_operation=op_data[2],
                aco_responsable=op_data[3],
                date_creation=datetime.fromisoformat(op_data[4]),
                date_debut=datetime.fromisoformat(op_data[5]),
                date_fin_prevue=datetime.fromisoformat(op_data[6]),
                budget=op_data[7],
                statut=op_data[8],
                phases=phases
            )
            operations.append(operation)
        
        conn.close()
        return operations
    
    def load_aco(self) -> List[ACO]:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM aco")
        aco_data = cursor.fetchall()
        
        operations = self.load_operations()
        
        aco_list = []
        for aco_record in aco_data:
            # Calculer statistiques pour cet ACO
            aco_operations = [op for op in operations if op.aco_responsable == aco_record[0]]
            operations_en_cours = len([op for op in aco_operations if op.statut in ["En cours", "Cr√©√©e"]])
            total_budget = sum(op.budget for op in aco_operations)
            
            aco = ACO(
                nom=aco_record[0],
                email=aco_record[1],
                telephone=aco_record[2],
                specialites=json.loads(aco_record[3]),
                operations_en_cours=operations_en_cours,
                total_budget=total_budget
            )
            aco_list.append(aco)
        
        conn.close()
        return aco_list

# ===== TEMPLATES M√âTIER EXACTS CORRIG√âS (100+ PHASES AUTORIS√âES) =====
TEMPLATES_PHASES = {
    # ===== OPP COMPLET (45 phases) =====
    "OPP": [
        # Phase identification et faisabilit√©
        {"nom": "Opportunit√© fonci√®re identifi√©e", "duree_jours": 7, "couleur": "#2ca02c"},
        {"nom": "Faisabilit√© technique et financi√®re", "duree_jours": 30, "couleur": "#2ca02c"},
        {"nom": "Validation programme", "duree_jours": 15, "couleur": "#2ca02c"},
        {"nom": "Acquisition foncier", "duree_jours": 90, "couleur": "#1f77b4"},
        {"nom": "√âtudes g√©otechniques", "duree_jours": 30, "couleur": "#1f77b4"},
        {"nom": "Lev√©e topographique", "duree_jours": 15, "couleur": "#1f77b4"},
        {"nom": "√âtude environnementale", "duree_jours": 45, "couleur": "#1f77b4"},
        {"nom": "Consultation architecte", "duree_jours": 30, "couleur": "#ff7f0e"},
        {"nom": "Attribution march√© MOE", "duree_jours": 15, "couleur": "#ff7f0e"},
        {"nom": "Notification MOE", "duree_jours": 7, "couleur": "#ff7f0e"},
        
        # Phase conception
        {"nom": "Phase ESQ (Esquisse)", "duree_jours": 30, "couleur": "#9467bd"},
        {"nom": "Phase APS (Avant-Projet Sommaire)", "duree_jours": 45, "couleur": "#9467bd"},
        {"nom": "Phase APD (Avant-Projet D√©finitif)", "duree_jours": 60, "couleur": "#9467bd"},
        {"nom": "D√©p√¥t Permis de Construire", "duree_jours": 7, "couleur": "#d62728"},
        {"nom": "Instruction PC", "duree_jours": 120, "couleur": "#d62728"},
        {"nom": "Obtention PC", "duree_jours": 15, "couleur": "#d62728"},
        {"nom": "Purge recours PC", "duree_jours": 60, "couleur": "#d62728"},
        {"nom": "Phase PRO (Projet)", "duree_jours": 60, "couleur": "#8c564b"},
        {"nom": "Pr√©paration DCE", "duree_jours": 30, "couleur": "#8c564b"},
        {"nom": "Consultation SPS", "duree_jours": 30, "couleur": "#8c564b"},
        
        # Phase consultation entreprises
        {"nom": "Lancement consultation entreprises", "duree_jours": 7, "couleur": "#e377c2"},
        {"nom": "Analyse offres", "duree_jours": 30, "couleur": "#e377c2"},
        {"nom": "Attribution march√©s travaux", "duree_jours": 20, "couleur": "#e377c2"},
        {"nom": "Signature march√©s", "duree_jours": 15, "couleur": "#e377c2"},
        {"nom": "Pr√©paration chantier", "duree_jours": 30, "couleur": "#7f7f7f"},
        {"nom": "Installation chantier", "duree_jours": 10, "couleur": "#7f7f7f"},
        {"nom": "Ordre de service", "duree_jours": 3, "couleur": "#7f7f7f"},
        
        # Phase travaux
        {"nom": "Travaux VRD", "duree_jours": 60, "couleur": "#bcbd22"},
        {"nom": "Travaux terrassement", "duree_jours": 30, "couleur": "#bcbd22"},
        {"nom": "Travaux fondations", "duree_jours": 45, "couleur": "#bcbd22"},
        {"nom": "Travaux gros ≈ìuvre", "duree_jours": 120, "couleur": "#17becf"},
        {"nom": "Travaux √©tanch√©it√©", "duree_jours": 30, "couleur": "#17becf"},
        {"nom": "Travaux charpente", "duree_jours": 45, "couleur": "#17becf"},
        {"nom": "Travaux couverture", "duree_jours": 30, "couleur": "#17becf"},
        {"nom": "Travaux cloisons", "duree_jours": 45, "couleur": "#aec7e8"},
        {"nom": "Travaux √©lectricit√©", "duree_jours": 60, "couleur": "#aec7e8"},
        {"nom": "Travaux plomberie", "duree_jours": 60, "couleur": "#aec7e8"},
        {"nom": "Travaux climatisation", "duree_jours": 45, "couleur": "#aec7e8"},
        {"nom": "Travaux rev√™tements", "duree_jours": 60, "couleur": "#ffbb78"},
        {"nom": "Travaux peinture", "duree_jours": 45, "couleur": "#ffbb78"},
        {"nom": "Travaux menuiseries", "duree_jours": 30, "couleur": "#ffbb78"},
        
        # Phase raccordements
        {"nom": "Raccordement EDF", "duree_jours": 45, "couleur": "#98df8a"},
        {"nom": "Raccordement eau", "duree_jours": 30, "couleur": "#98df8a"},
        {"nom": "Raccordement fibre", "duree_jours": 20, "couleur": "#98df8a"},
        {"nom": "Raccordement assainissement", "duree_jours": 30, "couleur": "#98df8a"},
        {"nom": "Nettoyage final", "duree_jours": 10, "couleur": "#ff9896"}
    ],
    
    # ===== VEFA COMPLET (25 phases) =====
    "VEFA": [
        {"nom": "Recherche programmes VEFA", "duree_jours": 30, "couleur": "#2ca02c"},
        {"nom": "Analyse promoteurs", "duree_jours": 20, "couleur": "#2ca02c"},
        {"nom": "N√©gociation conditions", "duree_jours": 30, "couleur": "#2ca02c"},
        {"nom": "Due diligence technique", "duree_jours": 15, "couleur": "#1f77b4"},
        {"nom": "Due diligence juridique", "duree_jours": 15, "couleur": "#1f77b4"},
        {"nom": "Due diligence financi√®re", "duree_jours": 10, "couleur": "#1f77b4"},
        {"nom": "Validation interne SPIC", "duree_jours": 15, "couleur": "#ff7f0e"},
        {"nom": "Signature contrat VEFA", "duree_jours": 7, "couleur": "#ff7f0e"},
        {"nom": "Appel de fonds 1 (35%)", "duree_jours": 3, "couleur": "#ff7f0e"},
        {"nom": "Suivi travaux fondations", "duree_jours": 60, "couleur": "#d62728"},
        {"nom": "Suivi travaux gros ≈ìuvre", "duree_jours": 120, "couleur": "#d62728"},
        {"nom": "Appel de fonds 2 (70%)", "duree_jours": 3, "couleur": "#d62728"},
        {"nom": "Suivi travaux second ≈ìuvre", "duree_jours": 90, "couleur": "#9467bd"},
        {"nom": "Suivi travaux finitions", "duree_jours": 60, "couleur": "#9467bd"},
        {"nom": "Suivi raccordements", "duree_jours": 30, "couleur": "#9467bd"},
        {"nom": "Pr√©-visite SPIC", "duree_jours": 7, "couleur": "#8c564b"},
        {"nom": "Pr√©-r√©ception promoteur", "duree_jours": 15, "couleur": "#8c564b"},
        {"nom": "Lev√©e r√©serves", "duree_jours": 60, "couleur": "#8c564b"},
        {"nom": "R√©ception d√©finitive", "duree_jours": 7, "couleur": "#bcbd22"},
        {"nom": "Appel de fonds final (95%)", "duree_jours": 3, "couleur": "#bcbd22"},
        {"nom": "Remise cl√©s", "duree_jours": 3, "couleur": "#bcbd22"},
        {"nom": "Livraison locataires", "duree_jours": 30, "couleur": "#17becf"},
        {"nom": "Solde final (5%)", "duree_jours": 7, "couleur": "#17becf"},
        {"nom": "DGD VEFA", "duree_jours": 30, "couleur": "#17becf"},
        {"nom": "Bilan op√©ration VEFA", "duree_jours": 15, "couleur": "#17becf"}
    ],
    
    # ===== MANDATS_ETUDES EXACT (14 phases) =====
    "MANDATS_ETUDES": [
        {"nom": "Signature convention mandat", "duree_jours": 7, "couleur": "#2ca02c"},
        {"nom": "D√©finition besoins/programme", "duree_jours": 20, "couleur": "#2ca02c"},
        {"nom": "Diagnostic technique/urbain", "duree_jours": 30, "couleur": "#1f77b4"},
        {"nom": "√âtudes de faisabilit√©", "duree_jours": 45, "couleur": "#1f77b4"},
        {"nom": "Lancement consultation programmiste", "duree_jours": 15, "couleur": "#ff7f0e"},
        {"nom": "Attribution/notification programmiste", "duree_jours": 10, "couleur": "#ff7f0e"},
        {"nom": "Lancement consultation MOE urbaine", "duree_jours": 20, "couleur": "#d62728"},
        {"nom": "Attribution/notification MOE urbaine", "duree_jours": 15, "couleur": "#d62728"},
        {"nom": "D√©marrage √©tudes (OS)", "duree_jours": 5, "couleur": "#9467bd"},
        {"nom": "Concertation/validation interm√©diaire", "duree_jours": 30, "couleur": "#9467bd"},
        {"nom": "Remise livrables interm√©diaires", "duree_jours": 15, "couleur": "#8c564b"},
        {"nom": "Remise livrables finaux", "duree_jours": 20, "couleur": "#8c564b"},
        {"nom": "Validation mandant", "duree_jours": 15, "couleur": "#bcbd22"},
        {"nom": "Cl√¥ture mandat", "duree_jours": 10, "couleur": "#17becf"}
    ],
    
    # ===== MANDATS_REALISATION EXACT (21 phases) =====
    "MANDATS_REALISATION": [
        {"nom": "Signature convention mandat", "duree_jours": 7, "couleur": "#2ca02c"},
        {"nom": "Lancement consultation MOE", "duree_jours": 30, "couleur": "#2ca02c"},
        {"nom": "Attribution/notification MOE", "duree_jours": 15, "couleur": "#2ca02c"},
        {"nom": "OS √©tudes conception", "duree_jours": 5, "couleur": "#1f77b4"},
        {"nom": "Phase DIAG (si r√©novation)", "duree_jours": 20, "couleur": "#1f77b4"},
        {"nom": "Phase ESQ (Esquisse)", "duree_jours": 30, "couleur": "#1f77b4"},
        {"nom": "Phase APS (Avant-Projet Sommaire)", "duree_jours": 45, "couleur": "#ff7f0e"},
        {"nom": "Phase APD (Avant-Projet D√©finitif)", "duree_jours": 60, "couleur": "#ff7f0e"},
        {"nom": "Phase PRO-DCE (Projet-DCE)", "duree_jours": 45, "couleur": "#ff7f0e"},
        {"nom": "Lancement consultation entreprises", "duree_jours": 30, "couleur": "#d62728"},
        {"nom": "Attribution/notification march√©s", "duree_jours": 20, "couleur": "#d62728"},
        {"nom": "OS travaux", "duree_jours": 5, "couleur": "#d62728"},
        {"nom": "Phase EXE (√âtudes ex√©cution)", "duree_jours": 30, "couleur": "#9467bd"},
        {"nom": "D√©marrage travaux", "duree_jours": 10, "couleur": "#9467bd"},
        {"nom": "Suivi chantier", "duree_jours": 240, "couleur": "#9467bd"},
        {"nom": "R√©ception provisoire", "duree_jours": 15, "couleur": "#8c564b"},
        {"nom": "Lev√©e r√©serves", "duree_jours": 60, "couleur": "#8c564b"},
        {"nom": "R√©ception d√©finitive", "duree_jours": 15, "couleur": "#8c564b"},
        {"nom": "DGD (D√©compte G√©n√©ral)", "duree_jours": 30, "couleur": "#bcbd22"},
        {"nom": "GPA (Garantie Parfait Ach√®vement)", "duree_jours": 365, "couleur": "#bcbd22"},
        {"nom": "Cl√¥ture mandat", "duree_jours": 15, "couleur": "#17becf"}
    ],
    
    # ===== AMO EXACT (15 phases) =====
    "AMO": [
        {"nom": "Signature march√© AMO", "duree_jours": 7, "couleur": "#2ca02c"},
        {"nom": "Assistance d√©finition besoins", "duree_jours": 30, "couleur": "#2ca02c"},
        {"nom": "Assistance retenir MOE", "duree_jours": 45, "couleur": "#2ca02c"},
        {"nom": "Suivi √©tudes conception", "duree_jours": 120, "couleur": "#1f77b4"},
        {"nom": "Assistance r√©daction pi√®ces", "duree_jours": 30, "couleur": "#1f77b4"},
        {"nom": "Assistance retenir OPC/CT/SPS", "duree_jours": 20, "couleur": "#ff7f0e"},
        {"nom": "Assistance march√©s entreprises", "duree_jours": 60, "couleur": "#ff7f0e"},
        {"nom": "Suivi ex√©cution travaux", "duree_jours": 240, "couleur": "#d62728"},
        {"nom": "Assistance r√©ceptions", "duree_jours": 30, "couleur": "#d62728"},
        {"nom": "Assistance DGD", "duree_jours": 45, "couleur": "#9467bd"},
        {"nom": "Suivi GPA", "duree_jours": 365, "couleur": "#9467bd"},
        {"nom": "Assistance cl√¥ture", "duree_jours": 20, "couleur": "#8c564b"},
        {"nom": "Bilan mission AMO", "duree_jours": 15, "couleur": "#8c564b"},
        {"nom": "Retour d'exp√©rience", "duree_jours": 10, "couleur": "#bcbd22"},
        {"nom": "Cl√¥ture mission", "duree_jours": 5, "couleur": "#17becf"}
    ]
}

# ===== UNIT√âS DE DUR√âE MULTIPLES =====
UNITES_DUREE = {
    "jours": 1,
    "semaines": 7,
    "mois": 30
}

def convert_to_days(valeur: int, unite: str) -> int:
    """Convertit une dur√©e en jours selon l'unit√©"""
    return valeur * UNITES_DUREE[unite]

def format_duration(jours: int) -> str:
    """Formate une dur√©e en jours vers l'unit√© la plus appropri√©e"""
    if jours >= 30 and jours % 30 == 0:
        return f"{jours // 30} mois"
    elif jours >= 7 and jours % 7 == 0:
        return f"{jours // 7} semaines"
    else:
        return f"{jours} jours"

# Initialisation de la base de donn√©es
@st.cache_resource
def get_database():
    return DatabaseManager()

# Session state pour la navigation
if 'selected_operation_id' not in st.session_state:
    st.session_state.selected_operation_id = None
if 'selected_aco' not in st.session_state:
    st.session_state.selected_aco = None

def create_timeline_gantt(operation: Operation):
    """Cr√©e une timeline Gantt horizontale avec fl√®ches color√©es - SYNCHRONIS√âE"""
    if not operation.phases:
        st.warning("Aucune phase d√©finie pour cette op√©ration")
        return None
    
    fig = go.Figure()
    
    # Cr√©er les barres pour chaque phase
    for i, phase in enumerate(operation.phases):
        # Calculer la dur√©e en jours
        duration = (phase.date_fin - phase.date_debut).days + 1
        
        # Couleur selon le statut
        color = phase.couleur
        if phase.statut == "Termin√©":
            color = "#28a745"
        elif phase.statut == "En cours":
            color = "#007bff"
        elif phase.statut == "Retard":
            color = "#dc3545"
        
        # Ic√¥ne freins
        icon = " ‚ö†Ô∏è" if phase.freins else ""
        
        # Ajouter la barre de la phase
        fig.add_trace(go.Bar(
            name=phase.nom,
            x=[duration],
            y=[f"{phase.nom}{icon}"],
            orientation='h',
            marker=dict(
                color=color,
                line=dict(color='white', width=2),
                opacity=0.9
            ),
            base=phase.date_debut,
            text=f"{format_duration(duration)}",
            textposition="inside",
            textfont=dict(color="white", size=10, family="Arial"),
            hovertemplate=(
                f"<b>{phase.nom}</b><br>"
                f"D√©but: {phase.date_debut.strftime('%d/%m/%Y')}<br>"
                f"Fin: {phase.date_fin.strftime('%d/%m/%Y')}<br>"
                f"Dur√©e: {format_duration(duration)}<br>"
                f"Statut: {phase.statut}<br>"
                f"Responsable: {phase.responsable}<br>"
                f"Freins: {len(phase.freins)}<br>"
                "<extra></extra>"
            )
        ))
        
        # Ajouter une fl√®che si ce n'est pas la derni√®re phase
        if i < len(operation.phases) - 1:
            next_phase = operation.phases[i + 1]
            
            # Fl√®che de liaison
            fig.add_annotation(
                x=phase.date_fin,
                y=i,
                ax=next_phase.date_debut,
                ay=i + 1,
                arrowhead=2,
                arrowsize=1.5,
                arrowwidth=3,
                arrowcolor="#666666"
            )
    
    # Configuration du layout
    fig.update_layout(
        title={
            'text': f"Timeline Interactive - {operation.nom}",
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 18, 'color': '#1f77b4'}
        },
        xaxis_title="P√©riode",
        yaxis_title="Phases",
        height=max(400, len(operation.phases) * 40),
        showlegend=False,
        plot_bgcolor='rgba(248,249,250,0.8)',
        paper_bgcolor='rgba(255,255,255,1)',
        xaxis=dict(
            type='date',
            tickformat='%b %Y',
            gridcolor='lightgray',
            gridwidth=0.5,
            showgrid=True
        ),
        yaxis=dict(
            gridcolor='lightgray',
            gridwidth=0.5,
            showgrid=True,
            autorange="reversed"
        ),
        margin=dict(l=250, r=50, t=60, b=50),
        font=dict(family="Arial", size=11)
    )
    
    return fig

def dashboard():
    """Dashboard principal avec KPIs et vue d'ensemble - INTERACTIF"""
    st.markdown('<div class="main-header">üèóÔ∏è OPCOPILOT v3.0 - SPIC Guadeloupe</div>', unsafe_allow_html=True)
    
    db = get_database()
    operations = db.load_operations()
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìä Op√©rations Totales",
            value=len(operations),
            delta=f"+{len([op for op in operations if op.date_creation > datetime.now() - timedelta(days=30)])} ce mois"
        )
    
    with col2:
        operations_actives = [op for op in operations if op.statut in ["En cours", "Cr√©√©e"]]
        st.metric(
            label="üîÑ Op√©rations Actives",
            value=len(operations_actives),
            delta=f"{len(operations_actives)/len(operations)*100:.1f}%" if operations else "0%"
        )
    
    with col3:
        budget_total = sum(op.budget for op in operations)
        st.metric(
            label="üí∞ Budget Total",
            value=f"{budget_total:,.0f} ‚Ç¨",
            delta=f"{budget_total/len(operations):,.0f} ‚Ç¨ moy." if operations else "0 ‚Ç¨"
        )
    
    with col4:
        phases_en_retard = sum(1 for op in operations for phase in op.phases if phase.statut == "Retard")
        freins_critiques = sum(1 for op in operations for phase in op.phases if phase.freins)
        st.metric(
            label="‚ö†Ô∏è Alertes Critiques",
            value=phases_en_retard + freins_critiques,
            delta="Action requise" if (phases_en_retard + freins_critiques) > 0 else "RAS",
            delta_color="inverse"
        )
    
    # Graphiques de suivi avec filtres
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà R√©partition par Type d'Op√©ration")
        if operations:
            type_counts = {}
            for op in operations:
                type_counts[op.type_operation] = type_counts.get(op.type_operation, 0) + 1
            
            fig_pie = px.pie(
                values=list(type_counts.values()),
                names=list(type_counts.keys()),
                color_discrete_sequence=['#2ca02c', '#1f77b4', '#ff7f0e', '#d62728', '#9467bd']
            )
            fig_pie.update_layout(height=300)
            st.plotly_chart(fig_pie, use_container_width=True)
        else:
            st.info("Aucune op√©ration cr√©√©e")
    
    with col2:
        st.subheader("üìä KPIs par ACO")
        if operations:
            aco_stats = {}
            for op in operations:
                if op.aco_responsable not in aco_stats:
                    aco_stats[op.aco_responsable] = {"total": 0, "actives": 0, "budget": 0}
                aco_stats[op.aco_responsable]["total"] += 1
                aco_stats[op.aco_responsable]["budget"] += op.budget
                if op.statut in ["En cours", "Cr√©√©e"]:
                    aco_stats[op.aco_responsable]["actives"] += 1
            
            df_aco = pd.DataFrame.from_dict(aco_stats, orient='index')
            df_aco['ACO'] = df_aco.index
            
            fig_bar = px.bar(
                df_aco, 
                x='ACO', 
                y='actives',
                title="Op√©rations Actives par ACO",
                color='actives',
                color_continuous_scale='Blues'
            )
            fig_bar.update_layout(height=300)
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("Aucune donn√©e ACO")
    
    # ===== TABLEAU INTERACTIF AVEC LIENS CLIQUABLES =====
    st.subheader("üìã Op√©rations R√©centes (Cliquables)")
    if operations:
        # Trier par date de cr√©ation (plus r√©centes d'abord)
        operations_sorted = sorted(operations, key=lambda x: x.date_creation, reverse=True)
        
        # Prendre les 10 plus r√©centes
        recent_ops = operations_sorted[:10]
        
        # Cr√©er le DataFrame pour l'affichage
        data = []
        for op in recent_ops:
            phases_count = len(op.phases)
            phases_completed = len([p for p in op.phases if p.statut == "Termin√©"])
            phases_retard = len([p for p in op.phases if p.statut == "Retard"])
            progress = f"{phases_completed}/{phases_count}" if phases_count > 0 else "0/0"
            
            # Indicateur de statut
            status_indicator = "üü¢" if phases_retard == 0 else "üî¥"
            if any(p.freins for p in op.phases):
                status_indicator = "üü†"
            
            data.append({
                "üéØ": status_indicator,
                "Nom": op.nom,
                "Type": op.type_operation,
                "ACO": op.aco_responsable,
                "Statut": op.statut,
                "Budget": f"{op.budget:,.0f} ‚Ç¨",
                "Progression": progress,
                "Cr√©√©e le": op.date_creation.strftime("%d/%m/%Y"),
                "ID": op.id  # Cach√© pour s√©lection
            })
        
        df = pd.DataFrame(data)
        
        # S√©lection d'op√©ration avec callback
        event = st.dataframe(
            df.drop('ID', axis=1), 
            use_container_width=True, 
            height=400,
            on_select="rerun",
            selection_mode="single-row"
        )
        
        # Navigation vers l'op√©ration s√©lectionn√©e
        if event.selection and event.selection.rows:
            selected_idx = event.selection.rows[0]
            selected_op_id = df.iloc[selected_idx]['ID']
            st.session_state.selected_operation_id = selected_op_id
            st.success(f"‚úÖ Op√©ration '{df.iloc[selected_idx]['Nom']}' s√©lectionn√©e. Allez dans 'Op√©rations en cours' pour voir les d√©tails.")
    else:
        st.info("Aucune op√©ration trouv√©e. Utilisez le module 'Nouvelle Op√©ration' pour commencer.")
    
    # Alertes et notifications avec actions
    st.subheader("üö® Alertes & Notifications")
    
    alerts = []
    for op in operations:
        for phase in op.phases:
            if phase.statut == "Retard":
                alerts.append({
                    "type": "retard",
                    "message": f"‚ö†Ô∏è **{op.nom}** - Phase '{phase.nom}' en retard",
                    "operation_id": op.id
                })
            if phase.freins:
                alerts.append({
                    "type": "frein",
                    "message": f"üõë **{op.nom}** - {len(phase.freins)} frein(s) sur '{phase.nom}'",
                    "operation_id": op.id
                })
    
    if alerts:
        for i, alert in enumerate(alerts[:5]):  # Afficher max 5 alertes
            col_alert, col_action = st.columns([3, 1])
            with col_alert:
                if alert["type"] == "retard":
                    st.error(alert["message"])
                else:
                    st.warning(alert["message"])
            with col_action:
                if st.button("Voir", key=f"alert_{i}"):
                    st.session_state.selected_operation_id = alert["operation_id"]
                    st.info("Allez dans 'Op√©rations en cours' pour traiter l'alerte.")
    else:
        st.success("‚úÖ Aucune alerte critique")

def nouvelle_operation():
    """Module de cr√©ation d'une nouvelle op√©ration - AVEC DUR√âES MULTIPLES"""
    st.header("‚ûï Nouvelle Op√©ration")
    
    db = get_database()
    aco_list = db.load_aco()
    aco_names = [aco.nom for aco in aco_list]
    
    with st.form("nouvelle_operation"):
        col1, col2 = st.columns(2)
        
        with col1:
            nom = st.text_input("Nom de l'op√©ration *", placeholder="Ex: R√©sidence Les Flamboyants")
            type_operation = st.selectbox(
                "Type d'op√©ration *",
                ["OPP", "VEFA", "MANDATS_ETUDES", "MANDATS_REALISATION", "AMO"]
            )
            aco_responsable = st.selectbox("ACO Responsable *", aco_names)
        
        with col2:
            budget = st.number_input("Budget (‚Ç¨) *", min_value=0.0, value=500000.0, step=10000.0)
            date_debut = st.date_input("Date de d√©but *", datetime.now().date())
            date_fin = st.date_input("Date de fin pr√©vue *", (datetime.now() + timedelta(days=365)).date())
        
        # Configuration des phases avec templates complets
        st.subheader("üéØ Configuration des Phases")
        
        # Phases par d√©faut selon le type
        if type_operation in TEMPLATES_PHASES:
            template_phases = TEMPLATES_PHASES[type_operation]
            duree_totale = sum(p["duree_jours"] for p in template_phases)
            st.info(f"üìã Template **{type_operation}** : {len(template_phases)} phases - Dur√©e totale : {format_duration(duree_totale)}")
            
            # Afficher les phases du template
            with st.expander(f"üëÅÔ∏è Voir les {len(template_phases)} phases du template {type_operation}"):
                for i, phase_template in enumerate(template_phases):
                    duration_formatted = format_duration(phase_template['duree_jours'])
                    st.write(f"**{i+1}.** {phase_template['nom']} - *{duration_formatted}*")
        
        # ===== OPTION PERSONNALISATION AVEC DUR√âES MULTIPLES =====
        personnaliser = st.checkbox("üîß Personnaliser les phases")
        phases_personnalisees = []
        
        if personnaliser:
            st.write("**Phases personnalis√©es :**")
            nb_phases = st.number_input("Nombre de phases", min_value=1, max_value=100, value=5)  # LIMITE SUPPRIM√âE
            
            for i in range(nb_phases):
                with st.container():
                    col_nom, col_duree, col_unite, col_couleur = st.columns([3, 1, 1, 1])
                    with col_nom:
                        phase_nom = st.text_input(f"Phase {i+1}", key=f"phase_nom_{i}")
                    with col_duree:
                        phase_duree = st.number_input(f"Dur√©e", min_value=1, value=30, key=f"phase_duree_{i}")
                    with col_unite:
                        phase_unite = st.selectbox("Unit√©", ["jours", "semaines", "mois"], key=f"phase_unite_{i}")
                    with col_couleur:
                        phase_couleur = st.color_picker("Couleur", "#1f77b4", key=f"phase_couleur_{i}")
                    
                    if phase_nom:
                        duree_jours = convert_to_days(phase_duree, phase_unite)
                        phases_personnalisees.append({
                            "nom": phase_nom,
                            "duree_jours": duree_jours,
                            "couleur": phase_couleur
                        })
        
        submitted = st.form_submit_button("üöÄ Cr√©er l'Op√©ration", type="primary")
        
        if submitted:
            # Validation
            if not nom or not type_operation or not aco_responsable:
                st.error("Veuillez remplir tous les champs obligatoires (*)")
                return
            
            if date_debut >= date_fin:
                st.error("La date de fin doit √™tre post√©rieure √† la date de d√©but")
                return
            
            # Cr√©er l'op√©ration
            operation_id = str(uuid.uuid4())
            
            # Utiliser les phases personnalis√©es ou le template
            phases_template = phases_personnalisees if personnaliser and phases_personnalisees else TEMPLATES_PHASES[type_operation]
            
            # Cr√©er les phases
            phases = []
            current_date = datetime.combine(date_debut, datetime.min.time())
            
            for phase_template in phases_template:
                phase_id = str(uuid.uuid4())
                date_fin_phase = current_date + timedelta(days=phase_template["duree_jours"] - 1)
                
                phase = Phase(
                    id=phase_id,
                    nom=phase_template["nom"],
                    date_debut=current_date,
                    date_fin=date_fin_phase,
                    couleur=phase_template["couleur"],
                    statut="En attente",
                    responsable=aco_responsable
                )
                phases.append(phase)
                current_date = date_fin_phase + timedelta(days=1)
            
            # Cr√©er l'op√©ration
            operation = Operation(
                id=operation_id,
                nom=nom,
                type_operation=type_operation,
                aco_responsable=aco_responsable,
                date_creation=datetime.now(),
                date_debut=datetime.combine(date_debut, datetime.min.time()),
                date_fin_prevue=datetime.combine(date_fin, datetime.min.time()),
                budget=budget,
                statut="Cr√©√©e",
                phases=phases
            )
            
            # Sauvegarder
            db.save_operation(operation)
            
            # Mettre √† jour s√©lection
            st.session_state.selected_operation_id = operation_id
            
            st.success(f"‚úÖ Op√©ration '{nom}' cr√©√©e avec succ√®s avec {len(phases)} phases !")
            st.balloons()
            
            # Afficher un aper√ßu de la timeline
            st.subheader("üìä Aper√ßu de la Timeline")
            fig = create_timeline_gantt(operation)
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            
            # SYNCHRONISATION FORC√âE
            st.rerun()

def operations_en_cours():
    """Module des op√©rations en cours (ancien Timeline Gantt) - SYNCHRONIS√â"""
    st.header("üìä Op√©rations en cours")  # NAVIGATION COH√âRENTE
    
    db = get_database()
    operations = db.load_operations()
    
    if not operations:
        st.warning("Aucune op√©ration trouv√©e. Cr√©ez d'abord une op√©ration.")
        return
    
    # S√©lection de l'op√©ration avec pr√©-s√©lection
    operation_names = [f"{op.nom} ({op.type_operation})" for op in operations]
    
    # Trouver l'index de l'op√©ration pr√©-s√©lectionn√©e
    default_index = 0
    if st.session_state.selected_operation_id:
        for i, op in enumerate(operations):
            if op.id == st.session_state.selected_operation_id:
                default_index = i
                break
    
    selected_name = st.selectbox(
        "S√©lectionner une op√©ration", 
        operation_names, 
        index=default_index,
        key="operation_selector"
    )
    
    if selected_name:
        # Trouver l'op√©ration s√©lectionn√©e
        selected_operation = None
        for op in operations:
            if f"{op.nom} ({op.type_operation})" == selected_name:
                selected_operation = op
                st.session_state.selected_operation_id = op.id
                break
        
        if selected_operation:
            # Informations de l'op√©ration
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Type", selected_operation.type_operation)
            with col2:
                st.metric("ACO", selected_operation.aco_responsable)
            with col3:
                st.metric("Budget", f"{selected_operation.budget:,.0f} ‚Ç¨")
            with col4:
                phases_completed = len([p for p in selected_operation.phases if p.statut == "Termin√©"])
                progress_pct = (phases_completed / len(selected_operation.phases) * 100) if selected_operation.phases else 0
                st.metric("Avancement", f"{progress_pct:.1f}%", f"{phases_completed}/{len(selected_operation.phases)} phases")
            
            # Timeline Gantt synchronis√©e
            st.subheader("üéØ Timeline Interactive")
            fig = create_timeline_gantt(selected_operation)
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            
            # Gestion des phases
            st.subheader("‚öôÔ∏è Gestion des Phases")
            
            tabs = st.tabs(["üìã Liste des Phases", "‚ûï Ajouter Phase", "üîß Modifier Phase"])
            
            with tabs[0]:
                # Liste des phases avec actions rapides
                for i, phase in enumerate(selected_operation.phases):
                    with st.expander(f"{i+1}. {phase.nom} ({phase.statut})", expanded=phase.statut == "Retard" or phase.freins):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**D√©but :** {phase.date_debut.strftime('%d/%m/%Y')}")
                            st.write(f"**Fin :** {phase.date_fin.strftime('%d/%m/%Y')}")
                            duration_days = (phase.date_fin - phase.date_debut).days + 1
                            st.write(f"**Dur√©e :** {format_duration(duration_days)}")
                        with col2:
                            st.write(f"**Statut :** {phase.statut}")
                            st.write(f"**Responsable :** {phase.responsable}")
                            if phase.freins:
                                st.error(f"**Freins ({len(phase.freins)}) :** {', '.join(phase.freins)}")
                        
                        if phase.description:
                            st.write(f"**Description :** {phase.description}")
                        
                        # Actions rapides avec SYNCHRONISATION
                        col_act1, col_act2, col_act3 = st.columns(3)
                        with col_act1:
                            if st.button(f"‚úÖ Terminer", key=f"complete_{phase.id}"):
                                phase.statut = "Termin√©"
                                db.save_operation(selected_operation)
                                st.success("Phase marqu√©e comme termin√©e !")
                                st.rerun()  # SYNCHRONISATION
                        with col_act2:
                            if st.button(f"üöÄ D√©marrer", key=f"start_{phase.id}"):
                                phase.statut = "En cours"
                                db.save_operation(selected_operation)
                                st.success("Phase marqu√©e en cours !")
                                st.rerun()  # SYNCHRONISATION
                        with col_act3:
                            if st.button(f"‚ö†Ô∏è Retard", key=f"delay_{phase.id}"):
                                phase.statut = "Retard"
                                db.save_operation(selected_operation)
                                st.warning("Phase marqu√©e en retard !")
                                st.rerun()  # SYNCHRONISATION
            
            with tabs[1]:
                # Ajouter une nouvelle phase avec DUR√âES MULTIPLES
                st.write("Ajouter une nouvelle phase √† l'op√©ration")
                
                with st.form("add_phase"):
                    col1, col2 = st.columns(2)
                    with col1:
                        new_phase_nom = st.text_input("Nom de la phase")
                        new_duree = st.number_input("Dur√©e", min_value=1, value=30)
                        new_unite = st.selectbox("Unit√©", ["jours", "semaines", "mois"])
                    with col2:
                        new_phase_responsable = st.text_input("Responsable", value=selected_operation.aco_responsable)
                        new_phase_couleur = st.color_picker("Couleur", "#1f77b4")
                    
                    new_phase_description = st.text_area("Description (optionnel)")
                    
                    # Position d'insertion
                    positions = ["√Ä la fin"] + [f"Avant '{phase.nom}'" for phase in selected_operation.phases]
                    position = st.selectbox("Ins√©rer", positions)
                    
                    if st.form_submit_button("Ajouter la Phase"):
                        if new_phase_nom:
                            # Convertir la dur√©e en jours
                            new_phase_duree = convert_to_days(new_duree, new_unite)
                            
                            # Calculer les dates
                            if position == "√Ä la fin" and selected_operation.phases:
                                date_debut = selected_operation.phases[-1].date_fin + timedelta(days=1)
                            elif position != "√Ä la fin":
                                # Trouver la position d'insertion
                                idx = positions.index(position) - 1
                                date_debut = selected_operation.phases[idx].date_debut
                                # D√©caler les phases suivantes
                                for phase in selected_operation.phases[idx:]:
                                    phase.date_debut += timedelta(days=new_phase_duree)
                                    phase.date_fin += timedelta(days=new_phase_duree)
                            else:
                                date_debut = selected_operation.date_debut
                            
                            date_fin = date_debut + timedelta(days=new_phase_duree - 1)
                            
                            # Cr√©er la nouvelle phase
                            new_phase = Phase(
                                id=str(uuid.uuid4()),
                                nom=new_phase_nom,
                                date_debut=date_debut,
                                date_fin=date_fin,
                                couleur=new_phase_couleur,
                                statut="En attente",
                                description=new_phase_description,
                                responsable=new_phase_responsable
                            )
                            
                            # Ins√©rer dans la liste
                            if position == "√Ä la fin":
                                selected_operation.phases.append(new_phase)
                            else:
                                idx = positions.index(position) - 1
                                selected_operation.phases.insert(idx, new_phase)
                            
                            # Sauvegarder avec SYNCHRONISATION
                            db.save_operation(selected_operation)
                            st.success("Phase ajout√©e avec succ√®s !")
                            st.rerun()  # SYNCHRONISATION TIMELINE
            
            with tabs[2]:
                # Modifier une phase existante avec VALIDATION FONCTIONNELLE
                if selected_operation.phases:
                    phase_names = [f"{phase.nom} ({phase.statut})" for phase in selected_operation.phases]
                    selected_phase_name = st.selectbox("S√©lectionner une phase √† modifier", phase_names)
                    
                    if selected_phase_name:
                        # Trouver la phase s√©lectionn√©e
                        selected_phase = None
                        for phase in selected_operation.phases:
                            if f"{phase.nom} ({phase.statut})" == selected_phase_name:
                                selected_phase = phase
                                break
                        
                        if selected_phase:
                            with st.form("modify_phase"):
                                col1, col2 = st.columns(2)
                                with col1:
                                    mod_statut = st.selectbox("Statut", 
                                        ["En attente", "En cours", "Termin√©", "Retard"],
                                        index=["En attente", "En cours", "Termin√©", "Retard"].index(selected_phase.statut)
                                    )
                                    mod_responsable = st.text_input("Responsable", value=selected_phase.responsable)
                                with col2:
                                    mod_date_debut = st.date_input("Date d√©but", value=selected_phase.date_debut.date())
                                    mod_date_fin = st.date_input("Date fin", value=selected_phase.date_fin.date())
                                
                                mod_description = st.text_area("Description", value=selected_phase.description)
                                
                                # ===== GESTION FREINS OP√âRATIONNELLE =====
                                st.write("**Freins identifi√©s :**")
                                freins_actuels = selected_phase.freins.copy()
                                
                                # Afficher les freins existants
                                if freins_actuels:
                                    for frein in freins_actuels:
                                        st.error(f"‚Ä¢ {frein}")
                                
                                # Ajouter nouveau frein
                                nouveau_frein = st.text_input("Ajouter un frein")
                                
                                # Freins pr√©d√©finis
                                freins_predefinies = [
                                    "Retard fournisseur",
                                    "Probl√®me technique",
                                    "Attente validation",
                                    "Conditions m√©t√©o",
                                    "Probl√®me administratif",
                                    "Manque de ressources",
                                    "D√©pendance externe"
                                ]
                                frein_predefini = st.selectbox("Ou s√©lectionner un frein pr√©d√©fini", [""] + freins_predefinies)
                                
                                # Actions freins
                                col_clear, col_add = st.columns(2)
                                with col_clear:
                                    clear_freins = st.checkbox("Lever tous les freins")
                                with col_add:
                                    add_frein = nouveau_frein or frein_predefini
                                
                                if st.form_submit_button("üíæ Modifier la Phase"):
                                    # Mettre √† jour la phase
                                    selected_phase.statut = mod_statut
                                    selected_phase.responsable = mod_responsable
                                    selected_phase.date_debut = datetime.combine(mod_date_debut, datetime.min.time())
                                    selected_phase.date_fin = datetime.combine(mod_date_fin, datetime.min.time())
                                    selected_phase.description = mod_description
                                    
                                    # Gestion des freins
                                    if clear_freins:
                                        selected_phase.freins = []
                                    if add_frein and add_frein not in selected_phase.freins:
                                        selected_phase.freins.append(add_frein)
                                    
                                    # Sauvegarder avec SYNCHRONISATION
                                    db.save_operation(selected_operation)
                                    st.success("Phase modifi√©e avec succ√®s !")
                                    st.rerun()  # SYNCHRONISATION TIMELINE

# ===== MODULES ACTIFS (VERT) =====
def gestion_aco():
    """Module de gestion des ACO - MAINTENANT ACTIF"""
    st.header("üë• Gestion ACO")
    
    db = get_database()
    aco_list = db.load_aco()
    operations = db.load_operations()
    
    tabs = st.tabs(["üìã Liste des ACO", "üìä Performances", "üë§ D√©tail ACO"])
    
    with tabs[0]:
        # Liste des ACO avec leurs statistiques
        st.subheader("üìã √âquipe ACO SPIC Guadeloupe")
        
        for aco in aco_list:
            with st.container():
                st.markdown(f"""
                <div class="aco-card">
                    <h4>üë§ {aco.nom}</h4>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Op√©rations en cours", aco.operations_en_cours)
                with col2:
                    st.metric("Budget total", f"{aco.total_budget:,.0f} ‚Ç¨")
                with col3:
                    st.write(f"**Email :** {aco.email}")
                with col4:
                    st.write(f"**T√©l√©phone :** {aco.telephone}")
                
                # Sp√©cialit√©s
                specialites_str = " | ".join(aco.specialites)
                st.write(f"**Sp√©cialit√©s :** {specialites_str}")
                
                # LIAISON ACO ‚Üî OP√âRATIONS OP√âRATIONNELLE
                if st.button(f"Voir les op√©rations de {aco.nom}", key=f"voir_{aco.nom}"):
                    st.session_state.selected_aco = aco.nom
                    st.rerun()
                
                st.markdown("---")
    
    with tabs[1]:
        # Performances des ACO
        st.subheader("üìä Tableau de Bord des Performances")
        
        if aco_list:
            # Graphique des op√©rations par ACO
            aco_names = [aco.nom for aco in aco_list]
            operations_counts = [aco.operations_en_cours for aco in aco_list]
            budgets = [aco.total_budget for aco in aco_list]
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig_ops = px.bar(
                    x=aco_names, 
                    y=operations_counts,
                    title="Op√©rations en cours par ACO",
                    labels={'x': 'ACO', 'y': 'Nombre d\'op√©rations'},
                    color=operations_counts,
                    color_continuous_scale='Blues'
                )
                st.plotly_chart(fig_ops, use_container_width=True)
            
            with col2:
                fig_budget = px.bar(
                    x=aco_names, 
                    y=budgets,
                    title="Budget total g√©r√© par ACO",
                    labels={'x': 'ACO', 'y': 'Budget (‚Ç¨)'},
                    color=budgets,
                    color_continuous_scale='Greens'
                )
                st.plotly_chart(fig_budget, use_container_width=True)
            
            # Statistiques d√©taill√©es
            st.subheader("üìà Analyse des Performances")
            
            for aco in aco_list:
                aco_operations = [op for op in operations if op.aco_responsable == aco.nom]
                
                if aco_operations:
                    # Calculer les m√©triques
                    phases_retard = sum(1 for op in aco_operations for phase in op.phases if phase.statut == "Retard")
                    phases_freins = sum(1 for op in aco_operations for phase in op.phases if phase.freins)
                    budget_moyen = aco.total_budget / len(aco_operations) if aco_operations else 0
                    
                    with st.expander(f"üìä D√©tail {aco.nom}"):
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("Op√©rations totales", len(aco_operations))
                        with col2:
                            st.metric("Phases en retard", phases_retard)
                        with col3:
                            st.metric("Phases avec freins", phases_freins)
                        with col4:
                            st.metric("Budget moyen", f"{budget_moyen:,.0f} ‚Ç¨")
    
    with tabs[2]:
        # D√©tail ACO s√©lectionn√© avec WORKFLOW
        if st.session_state.selected_aco:
            selected_aco_obj = None
            for aco in aco_list:
                if aco.nom == st.session_state.selected_aco:
                    selected_aco_obj = aco
                    break
            
            if selected_aco_obj:
                st.subheader(f"üë§ D√©tail {selected_aco_obj.nom}")
                
                # Informations personnelles
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Email :** {selected_aco_obj.email}")
                    st.write(f"**T√©l√©phone :** {selected_aco_obj.telephone}")
                with col2:
                    st.write(f"**Sp√©cialit√©s :** {' | '.join(selected_aco_obj.specialites)}")
                
                # Op√©rations de cet ACO
                aco_operations = [op for op in operations if op.aco_responsable == selected_aco_obj.nom]
                
                if aco_operations:
                    st.subheader(f"üìã Op√©rations de {selected_aco_obj.nom} ({len(aco_operations)})")
                    
                    # Tableau des op√©rations avec NAVIGATION
                    data = []
                    for op in aco_operations:
                        phases_completed = len([p for p in op.phases if p.statut == "Termin√©"])
                        phases_retard = len([p for p in op.phases if p.statut == "Retard"])
                        phases_freins = sum(1 for p in op.phases if p.freins)
                        
                        status_indicator = "üü¢"
                        if phases_retard > 0:
                            status_indicator = "üî¥"
                        elif phases_freins > 0:
                            status_indicator = "üü†"
                        
                        data.append({
                            "üéØ": status_indicator,
                            "Nom": op.nom,
                            "Type": op.type_operation,
                            "Statut": op.statut,
                            "Budget": f"{op.budget:,.0f} ‚Ç¨",
                            "Progression": f"{phases_completed}/{len(op.phases)}",
                            "Retards": phases_retard,
                            "Freins": phases_freins,
                            "Cr√©√©e": op.date_creation.strftime("%d/%m/%Y")
                        })
                    
                    df = pd.DataFrame(data)
                    
                    # S√©lection d'op√©ration avec navigation
                    event = st.dataframe(
                        df, 
                        use_container_width=True,
                        on_select="rerun",
                        selection_mode="single-row"
                    )
                    
                    # Navigation vers l'op√©ration s√©lectionn√©e
                    if event.selection and event.selection.rows:
                        selected_idx = event.selection.rows[0]
                        selected_op = aco_operations[selected_idx]
                        st.session_state.selected_operation_id = selected_op.id
                        st.success(f"‚úÖ Op√©ration '{selected_op.nom}' s√©lectionn√©e. Allez dans 'Op√©rations en cours' pour voir les d√©tails.")
                else:
                    st.info(f"Aucune op√©ration assign√©e √† {selected_aco_obj.nom}")
        else:
            st.info("S√©lectionnez un ACO dans l'onglet 'Liste des ACO' pour voir les d√©tails.")

def freins_alertes():
    """Module de gestion des freins et alertes - MAINTENANT ACTIF"""
    st.header("üö® Freins & Alertes")
    
    db = get_database()
    operations = db.load_operations()
    
    # Collecter toutes les alertes
    alertes_retard = []
    alertes_freins = []
    
    for op in operations:
        for phase in op.phases:
            if phase.statut == "Retard":
                alertes_retard.append({
                    "operation": op,
                    "phase": phase,
                    "gravite": "Critique"
                })
            if phase.freins:
                alertes_freins.append({
                    "operation": op,
                    "phase": phase,
                    "freins": phase.freins,
                    "gravite": "√âlev√©e" if len(phase.freins) > 2 else "Mod√©r√©e"
                })
    
    # M√©triques d'alerte
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üî¥ Phases en Retard", len(alertes_retard))
    with col2:
        st.metric("üü† Phases avec Freins", len(alertes_freins))
    with col3:
        total_freins = sum(len(alert["freins"]) for alert in alertes_freins)
        st.metric("üìä Total Freins", total_freins)
    with col4:
        alertes_critiques = len([a for a in alertes_retard]) + len([a for a in alertes_freins if a["gravite"] == "√âlev√©e"])
        st.metric("‚ö†Ô∏è Alertes Critiques", alertes_critiques)
    
    tabs = st.tabs(["üî¥ Retards", "üü† Freins", "üìä Tableau de Bord"])
    
    with tabs[0]:
        # Gestion des retards
        st.subheader("üî¥ Phases en Retard")
        
        if alertes_retard:
            for i, alerte in enumerate(alertes_retard):
                op = alerte["operation"]
                phase = alerte["phase"]
                
                st.markdown(f"""
                <div class="frein-critical">
                    <h5>‚ö†Ô∏è {op.nom} - {phase.nom}</h5>
                    <p><strong>ACO:</strong> {op.aco_responsable} | <strong>Type:</strong> {op.type_operation}</p>
                    <p><strong>P√©riode:</strong> {phase.date_debut.strftime('%d/%m/%Y')} ‚Üí {phase.date_fin.strftime('%d/%m/%Y')}</p>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button(f"‚úÖ R√©solu", key=f"resolve_retard_{i}"):
                        phase.statut = "En cours"
                        db.save_operation(op)
                        st.success("Retard r√©solu !")
                        st.rerun()
                with col2:
                    if st.button(f"üìÖ Reprogrammer", key=f"reschedule_{i}"):
                        # Ajouter 7 jours √† la date de fin
                        phase.date_fin += timedelta(days=7)
                        db.save_operation(op)
                        st.info("Phase reprogramm√©e (+7 jours)")
                        st.rerun()
                with col3:
                    if st.button(f"üëÅÔ∏è Voir D√©tail", key=f"view_retard_{i}"):
                        st.session_state.selected_operation_id = op.id
                        st.info("Allez dans 'Op√©rations en cours' pour plus de d√©tails.")
        else:
            st.success("‚úÖ Aucune phase en retard !")
    
    with tabs[1]:
        # Gestion des freins
        st.subheader("üü† Freins Identifi√©s")
        
        if alertes_freins:
            for i, alerte in enumerate(alertes_freins):
                op = alerte["operation"]
                phase = alerte["phase"]
                freins = alerte["freins"]
                
                st.markdown(f"""
                <div class="frein-alert">
                    <h5>üõë {op.nom} - {phase.nom}</h5>
                    <p><strong>ACO:</strong> {op.aco_responsable} | <strong>Gravit√©:</strong> {alerte['gravite']}</p>
                    <p><strong>Freins ({len(freins)}):</strong> {', '.join(freins)}</p>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button(f"‚úÖ Lever Freins", key=f"resolve_frein_{i}"):
                        phase.freins = []
                        db.save_operation(op)
                        st.success("Freins lev√©s !")
                        st.rerun()
                with col2:
                    # Ajouter frein avec formulaire rapide
                    with st.form(f"add_frein_form_{i}"):
                        new_frein = st.text_input("Nouveau frein", key=f"new_frein_{i}")
                        if st.form_submit_button("‚ûï"):
                            if new_frein:
                                phase.freins.append(new_frein)
                                db.save_operation(op)
                                st.success("Frein ajout√© !")
                                st.rerun()
                with col3:
                    if st.button(f"üëÅÔ∏è Voir D√©tail", key=f"view_frein_{i}"):
                        st.session_state.selected_operation_id = op.id
                        st.info("Allez dans 'Op√©rations en cours' pour plus de d√©tails.")
        else:
            st.success("‚úÖ Aucun frein identifi√© !")
    
    with tabs[2]:
        # Tableau de bord des alertes
        st.subheader("üìä Tableau de Bord des Alertes")
        
        # Graphique des alertes par ACO
        aco_alerts = {}
        for op in operations:
            aco = op.aco_responsable
            if aco not in aco_alerts:
                aco_alerts[aco] = {"retards": 0, "freins": 0}
            
            for phase in op.phases:
                if phase.statut == "Retard":
                    aco_alerts[aco]["retards"] += 1
                if phase.freins:
                    aco_alerts[aco]["freins"] += len(phase.freins)
        
        if aco_alerts:
            df_alerts = pd.DataFrame.from_dict(aco_alerts, orient='index')
            df_alerts['ACO'] = df_alerts.index
            df_alerts['Total_Alertes'] = df_alerts['retards'] + df_alerts['freins']
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig_retards = px.bar(
                    df_alerts, 
                    x='ACO', 
                    y='retards',
                    title="Retards par ACO",
                    color='retards',
                    color_continuous_scale='Reds'
                )
                st.plotly_chart(fig_retards, use_container_width=True)
            
            with col2:
                fig_freins = px.bar(
                    df_alerts, 
                    x='ACO', 
                    y='freins',
                    title="Freins par ACO",
                    color='freins',
                    color_continuous_scale='Oranges'
                )
                st.plotly_chart(fig_freins, use_container_width=True)

def main():
    """Fonction principale avec navigation coh√©rente"""
    
    # Sidebar avec navigation
    st.sidebar.markdown("""
        <div class="sidebar-logo">
            <h2>üèóÔ∏è OPCOPILOT</h2>
            <p>SPIC Guadeloupe v3.0</p>
        </div>
    """, unsafe_allow_html=True)
    
    # ===== NAVIGATION COH√âRENTE =====
    pages = {
        "üè† Dashboard": dashboard,
        "‚ûï Nouvelle Op√©ration": nouvelle_operation,
        "üìä Op√©rations en cours": operations_en_cours,  # NAVIGATION COH√âRENTE
        "üë• Gestion ACO": gestion_aco,  # MAINTENANT ACTIF (VERT)
        "üö® Freins & Alertes": freins_alertes  # MAINTENANT ACTIF (VERT)
    }
    
    selected_page = st.sidebar.selectbox("Navigation", list(pages.keys()))
    
    # ===== MODULES DISPONIBLES (CORRECTION STATUTS) =====
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìã Modules Disponibles")
    modules = [
        "‚úÖ Dashboard KPIs",
        "‚úÖ Cr√©ation Op√©ration", 
        "‚úÖ Op√©rations en cours",  # NAVIGATION COH√âRENTE
        "‚úÖ Gestion ACO",  # MAINTENANT VERT (ACTIF)
        "‚úÖ Freins & Alertes",  # MAINTENANT VERT (ACTIF)
        "üîÑ REM Saisie (v3.1)",
        "üîÑ Avenants (v3.1)",
        "üîÑ MED Automatis√© (v3.1)",
        "üîÑ Concessionnaires (v3.1)",
        "üîÑ DGD (v3.1)",
        "üîÑ GPA (v3.1)",
        "üîÑ Lev√©e R√©serves (v3.1)"
    ]
    
    for module in modules:
        if module.startswith("‚úÖ"):
            st.sidebar.success(module)
        else:
            st.sidebar.info(module)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üéØ Version Actuelle")
    st.sidebar.info("OPCOPILOT v3.0 CORRIG√â\n‚úÖ Templates m√©tier exacts\n‚úÖ 5 Modules actifs\n‚úÖ Timeline synchronis√©e\nJuin 2025")
    
    # Session state pour la navigation
    if st.session_state.selected_operation_id:
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üéØ Op√©ration S√©lectionn√©e")
        db = get_database()
        operations = db.load_operations()
        selected_op = None
        for op in operations:
            if op.id == st.session_state.selected_operation_id:
                selected_op = op
                break
        
        if selected_op:
            st.sidebar.info(f"üìã {selected_op.nom}\nüë§ {selected_op.aco_responsable}")
            if st.sidebar.button("üóëÔ∏è D√©s√©lectionner"):
                st.session_state.selected_operation_id = None
                st.rerun()
    
    # Ex√©cuter la page s√©lectionn√©e
    pages[selected_page]()

if __name__ == "__main__":
    main()
